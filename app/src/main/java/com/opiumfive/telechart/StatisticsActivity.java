package com.opiumfive.telechart;

import android.graphics.Color;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.widget.AppCompatCheckBox;
import android.view.View;

import com.opiumfive.telechart.chart.formatter.AxisValueFormatter;
import com.opiumfive.telechart.chart.gesture.ZoomType;
import com.opiumfive.telechart.chart.listener.ViewportChangeListener;
import com.opiumfive.telechart.chart.model.Axis;
import com.opiumfive.telechart.chart.model.AxisValue;
import com.opiumfive.telechart.chart.model.Line;
import com.opiumfive.telechart.chart.model.LineChartData;
import com.opiumfive.telechart.chart.model.PointValue;
import com.opiumfive.telechart.chart.model.Viewport;
import com.opiumfive.telechart.chart.view.LineChartView;
import com.opiumfive.telechart.chart.view.PreviewLineChartView;
import com.opiumfive.telechart.data.ChartData;
import com.opiumfive.telechart.data.ChartDataParser;
import com.opiumfive.telechart.theming.ChangeThemeActivity;

import java.util.ArrayList;
import java.util.List;

public class StatisticsActivity extends ChangeThemeActivity {

    private LineChartView chart;
    private PreviewLineChartView previewChart;
    private LineChartData data;
    private LineChartData previewData;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_statistics);

        chart = findViewById(R.id.chart);
        previewChart = findViewById(R.id.chart_preview);

        ChartData chartData = ChartDataParser.loadAndParseInput(this, 0);

        inflateCharts(chartData);
    }

    private void inflateCharts(@Nullable final ChartData chartData) {
        if (chartData == null) return;

        List<PointValue> values = new ArrayList<>(chartData.getColumns().get(0).getList().size());
        List<PointValue> values2 = new ArrayList<>(chartData.getColumns().get(0).getList().size());
        for (int i = 0; i < chartData.getColumns().get(0).getList().size(); i++) {
            values.add(new PointValue(chartData.getColumns().get(0).getList().get(i), chartData.getColumns().get(1).getList().get(i)));
            values2.add(new PointValue(chartData.getColumns().get(0).getList().get(i), chartData.getColumns().get(2).getList().get(i)));
        }

        final Line line = new Line(values);
        final Line line2 = new Line(values2);
        line.setColor(Color.parseColor(chartData.getColors().get(chartData.getColumns().get(1).getTitle())));
        line2.setColor(Color.parseColor(chartData.getColors().get(chartData.getColumns().get(2).getTitle())));
        line.setHasPoints(false);
        line2.setHasPoints(false);
        line.setHasLabels(false);
        line2.setHasLabels(false);

        List<Line> lines = new ArrayList<>();
        lines.add(line);
        lines.add(line2);

        data = new LineChartData(lines);
        data.setAxisXBottom(new Axis().setFormatter(new AxisValueFormatter() {
            @Override
            public int formatValueForManualAxis(char[] formattedValue, AxisValue axisValue) {
                return 0;
            }

            @Override
            public int formatValueForAutoGeneratedAxis(char[] formattedValue, float value, int autoDecimalDigits) {
                return 0;
            }
        }));
        data.setAxisYLeft(new Axis().setHasLines(true));

        previewData = new LineChartData(data);

        chart.setLineChartData(data);
        chart.setZoomEnabled(false);
        chart.setScrollEnabled(false);
        chart.setValueSelectionEnabled(true);

        previewChart.setLineChartData(previewData);
        previewChart.setViewportChangeListener(new ViewportListener());
        previewChart.setZoomEnabled(false);

        final AppCompatCheckBox checkBox1 = findViewById(R.id.checkbox1);
        final AppCompatCheckBox checkBox2 = findViewById(R.id.checkbox2);

        View.OnClickListener listener = new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                List<Line> lines = new ArrayList<>();

                if (checkBox1.isChecked()) {
                    lines.add(line);
                }

                if (checkBox2.isChecked()) {
                    lines.add(line2);
                }

                data.setLines(lines);
                previewData.setLines(lines);
                chart.setLineChartData(data);
                previewChart.setLineChartData(previewData);

                previewX(true);
            }
        };

        checkBox1.setOnClickListener(listener);
        checkBox2.setOnClickListener(listener);

        previewX(true);
    }

    private class ViewportListener implements ViewportChangeListener {

        @Override
        public void onViewportChanged(Viewport newViewport) {
            chart.setCurrentViewport(newViewport);
        }

    }

    private void previewX(boolean animate) {
        Viewport tempViewport = new Viewport(chart.getMaximumViewport());
        float dx = tempViewport.width() / 3;
        tempViewport.inset(dx, 0);
        if (animate) {
            previewChart.setCurrentViewportWithAnimation(tempViewport);
        } else {
            previewChart.setCurrentViewport(tempViewport);
        }
        previewChart.setZoomType(ZoomType.HORIZONTAL);
    }
}
